[[inputs.file]]
data_format = "value"
data_type = "string"
files = ["./metrics/postgres/**json"]
[inputs.file.tags]
type = 'postgresql'

[[processors.starlark]]
namepass = ["file"]
source = '''
load("json.star", "json")
load("time.star", "time")

def apply(metric):
  d = json.decode(metric.fields['value'])
  server = d['servers'].keys()[0]
  timestamp = d['timestamp']
  date = time.parse_time(d['timestamp'], location="UTC").unix_nano
  metrics = []

  if 'error' in d['servers'][server]['postgres'].keys() and len(d['servers'][server]['postgres']['error']) > 0:
     return

  for k, v in d['servers'][server]['postgres']['connections'].items():
    m = Metric("postgresql")
    m.tags['server'] = server
    m.time = date
    m.fields[k] = v
    m.time = date
    metrics.append(m)

  for k, v in d['servers'][server]['postgres']['checkpoints'].items():
    m = Metric("postgresql")
    m.tags['server'] = server
    m.time = date
    m.fields[k] = v
    m.time = date
    metrics.append(m)

  if 'replication_slots' in d['servers'][server]['postgres'].keys():
    subdict = d['servers'][server]['postgres']['replication_slots']
    for k in subdict.keys():
      m = Metric("postgresql")
      m.tags['server'] = server
      m.tags['slot'] = k
      m.time = date
      for i,j in subdict[k].items():
        if i == 'active' or j == None:
          continue
        m.fields[i] = j

      metrics.append(m)

  subdict = d['servers'][server]['postgres']['databases']
  for db in subdict.keys():
    m = Metric("postgresql")
    m.tags['db'] = db
    m.tags['server'] = server
    m.time = date
    for k,v in subdict[db]['database_stats'].items():
      if v == None:
        continue
      m.fields[k] = v
    metrics.append(m)

    if 'table_stats' in subdict[db].keys():
       for table in subdict[db]['table_stats'].keys():
         m = Metric("postgresql")
         m.tags['db'] = db
         m.tags['table'] = table
         m.tags['server'] = server
         m.time = date
         for k,v in subdict[db]['table_stats'][table].items():
           if v == None:
             continue
           m.fields[k] = v
         metrics.append(m)

  return metrics
'''
[processors.starlark.tagpass]
type = ['postgresql']
